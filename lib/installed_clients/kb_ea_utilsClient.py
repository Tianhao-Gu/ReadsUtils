# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_ea_utils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def get_fastq_ea_utils_stats(self, input_params, context=None):
        """
        This function should be used for getting statistics on read library object types 
        The results are returned as a string.
        :param input_params: instance of type
           "get_fastq_ea_utils_stats_params" (if read_library_ref is set,
           then workspace_name and read_library_name are ignored) ->
           structure: parameter "workspace_name" of String, parameter
           "read_library_name" of String, parameter "read_library_ref" of
           String
        :returns: instance of String
        """
        return self._client.run_job('kb_ea_utils.get_fastq_ea_utils_stats',
                                    [input_params], self._service_ver, context)

    def run_app_fastq_ea_utils_stats(self, input_params, context=None):
        """
        This function should be used for getting statistics on read library object type.
        The results are returned as a report type object.
        :param input_params: instance of type
           "run_app_fastq_ea_utils_stats_params" (if read_library_ref is set,
           then workspace_name and read_library_name are ignored) ->
           structure: parameter "workspace_name" of String, parameter
           "read_library_name" of String, parameter "read_library_ref" of
           String
        :returns: instance of type "Report" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.run_job('kb_ea_utils.run_app_fastq_ea_utils_stats',
                                    [input_params], self._service_ver, context)

    def get_ea_utils_stats(self, input_params, context=None):
        """
        This function should be used for getting statistics on fastq files. Input is string of file path.
        Output is a report string.
        :param input_params: instance of type "ea_utils_params"
           (read_library_path : absolute path of fastq files) -> structure:
           parameter "read_library_path" of String
        :returns: instance of String
        """
        return self._client.run_job('kb_ea_utils.get_ea_utils_stats',
                                    [input_params], self._service_ver, context)

    def calculate_fastq_stats(self, input_params, context=None):
        """
        This function should be used for getting statistics on fastq files. Input is string of file path.
        Output is a data structure with different fields.
        :param input_params: instance of type "ea_utils_params"
           (read_library_path : absolute path of fastq files) -> structure:
           parameter "read_library_path" of String
        :returns: instance of type "ea_report" (read_count - the number of
           reads in the this dataset total_bases - the total number of bases
           for all the the reads in this library. gc_content - the GC content
           of the reads. read_length_mean - The average read length size
           read_length_stdev - The standard deviation read lengths phred_type
           - The scale of phred scores number_of_duplicates - The number of
           reads that are duplicates qual_min - min quality scores qual_max -
           max quality scores qual_mean - mean quality scores qual_stdev -
           stdev of quality scores base_percentages - The per base percentage
           breakdown) -> structure: parameter "read_count" of Long, parameter
           "total_bases" of Long, parameter "gc_content" of Double, parameter
           "read_length_mean" of Double, parameter "read_length_stdev" of
           Double, parameter "phred_type" of String, parameter
           "number_of_duplicates" of Long, parameter "qual_min" of Double,
           parameter "qual_max" of Double, parameter "qual_mean" of Double,
           parameter "qual_stdev" of Double, parameter "base_percentages" of
           mapping from String to Double
        """
        return self._client.run_job('kb_ea_utils.calculate_fastq_stats',
                                    [input_params], self._service_ver, context)

    def run_Fastq_Multx(self, params, context=None):
        """
        :param params: instance of type "run_Fastq_Multx_Input"
           (run_Fastq_Multx() ** ** demultiplex read libraries to readsSet)
           -> structure: parameter "workspace_name" of type "workspace_name"
           (** Common types), parameter "index_info" of type "textarea_str",
           parameter "desc" of String, parameter "index_mode" of String,
           parameter "input_reads_ref" of type "data_obj_ref", parameter
           "input_index_ref" of type "data_obj_ref", parameter
           "output_reads_name" of type "data_obj_name", parameter
           "barcode_options" of type "Barcode_Options" (Parameter groups) ->
           structure: parameter "use_header_barcode" of type "bool",
           parameter "trim_barcode" of type "bool", parameter
           "suggest_barcodes" of type "bool", parameter "force_edge_options"
           of type "ForceEdge_Options" -> structure: parameter "force_beg" of
           type "bool", parameter "force_end" of type "bool", parameter
           "dist_and_qual_params" of type "DistAndQual_Params" -> structure:
           parameter "mismatch_max" of Long, parameter "edit_dist_min" of
           Long, parameter "barcode_base_qual_score_min" of Long
        :returns: instance of type "run_Fastq_Multx_Output" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.run_job('kb_ea_utils.run_Fastq_Multx',
                                    [params], self._service_ver, context)

    def run_Fastq_Join(self, params, context=None):
        """
        :param params: instance of type "run_Fastq_Join_Input"
           (run_Fastq_Join() ** ** merge overlapping mate pairs into
           SingleEnd Lib.  This sub interacts with Narrative) -> structure:
           parameter "workspace_name" of type "workspace_name" (** Common
           types), parameter "input_reads_ref" of type "data_obj_ref",
           parameter "output_reads_name" of type "data_obj_name", parameter
           "verbose" of type "bool", parameter "reverse_complement" of type
           "bool", parameter "max_perc_dist" of Long, parameter
           "min_base_overlap" of Long
        :returns: instance of type "run_Fastq_Join_Output" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.run_job('kb_ea_utils.run_Fastq_Join',
                                    [params], self._service_ver, context)

    def exec_Fastq_Join(self, params, context=None):
        """
        :param params: instance of type "run_Fastq_Join_Input"
           (run_Fastq_Join() ** ** merge overlapping mate pairs into
           SingleEnd Lib.  This sub interacts with Narrative) -> structure:
           parameter "workspace_name" of type "workspace_name" (** Common
           types), parameter "input_reads_ref" of type "data_obj_ref",
           parameter "output_reads_name" of type "data_obj_name", parameter
           "verbose" of type "bool", parameter "reverse_complement" of type
           "bool", parameter "max_perc_dist" of Long, parameter
           "min_base_overlap" of Long
        :returns: instance of type "exec_Fastq_Join_Output" -> structure:
           parameter "output_joined_reads_ref" of type "data_obj_ref",
           parameter "output_unjoined_reads_ref" of type "data_obj_ref"
        """
        return self._client.run_job('kb_ea_utils.exec_Fastq_Join',
                                    [params], self._service_ver, context)

    def exec_Fastq_Join_OneLibrary(self, params, context=None):
        """
        :param params: instance of type "run_Fastq_Join_Input"
           (run_Fastq_Join() ** ** merge overlapping mate pairs into
           SingleEnd Lib.  This sub interacts with Narrative) -> structure:
           parameter "workspace_name" of type "workspace_name" (** Common
           types), parameter "input_reads_ref" of type "data_obj_ref",
           parameter "output_reads_name" of type "data_obj_name", parameter
           "verbose" of type "bool", parameter "reverse_complement" of type
           "bool", parameter "max_perc_dist" of Long, parameter
           "min_base_overlap" of Long
        :returns: instance of type "exec_Fastq_Join_Output" -> structure:
           parameter "output_joined_reads_ref" of type "data_obj_ref",
           parameter "output_unjoined_reads_ref" of type "data_obj_ref"
        """
        return self._client.run_job('kb_ea_utils.exec_Fastq_Join_OneLibrary',
                                    [params], self._service_ver, context)

    def exec_Determine_Phred(self, params, context=None):
        """
        :param params: instance of type "exec_Determine_Phred_Input"
           (exec_Determine_Phred() ** ** determine qual score regime.  Either
           "phred33" or "phred64") -> structure: parameter "workspace_name"
           of type "workspace_name" (** Common types), parameter
           "input_reads_ref" of type "data_obj_ref", parameter
           "input_reads_file" of type "file_path"
        :returns: instance of type "exec_Determine_Phred_Output" ->
           structure: parameter "phred_type" of String
        """
        return self._client.run_job('kb_ea_utils.exec_Determine_Phred',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('kb_ea_utils.status',
                                    [], self._service_ver, context)
